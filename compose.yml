services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports: [ "2181:2181" ]

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    ports: [ "9092:9092" ]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: orders
      POSTGRES_PASSWORD: orders
      POSTGRES_DB: ordersdb
    ports: [ "5432:5432" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders -d ordersdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports: [ "27017:27017" ]
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' -u root -p root --authenticationDatabase admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-setup:
    image: mongo:7
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mongosh --host mongo -u root -p root --authenticationDatabase admin
      --eval 'db.getSiblingDB(\"catalogdb\").createUser({user:\"catalog\", pwd:\"catalog\", roles:[{role:\"readWrite\", db:\"catalogdb\"}]});'
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on: [ kafka ]
    ports: [ "8085:8080" ]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  
  # Replace Zipkin with Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.51
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "9411:9411"    # Zipkin compatible endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=memory
      - LOG_LEVEL=debug
      
  # Note: Microservices (eureka-server, api-gateway, order-service, catalog-service)
  # are run locally with Gradle, not as Docker containers
  # Use: ./gradlew :service-name:bootRun

  postgres-auth:
    image: postgres:16
    container_name: postgres-auth
    environment:
      POSTGRES_DB: shoplite_auth
      POSTGRES_USER: shoplite
      POSTGRES_PASSWORD: shoplite
    ports:
      - "5433:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data

volumes:
  postgres_auth_data: