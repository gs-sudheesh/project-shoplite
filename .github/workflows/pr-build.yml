name: PR Build and Test

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'

jobs:
  # Job 1: Build and Test Java Services
  build-java-services:
    name: Build Java Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build all services
        run: |
          echo "🔨 Building all Java microservices..."
          ./gradlew clean build -x test --no-daemon --parallel
          echo "✅ All Java services built successfully"

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          ./gradlew test --no-daemon
          echo "✅ Unit tests completed"

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Java Tests
          path: '**/build/test-results/test/*.xml'
          reporter: java-junit

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: java-build-artifacts
          path: |
            */build/libs/*.jar
            build/reports/tests/test/index.html
          retention-days: 7

  # Job 2: Build and Test Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          echo "📦 Installing frontend dependencies..."
          cd frontend
          npm ci
          echo "✅ Dependencies installed"

      - name: Run linting
        run: |
          echo "🔍 Running ESLint..."
          cd frontend
          npm run lint || echo "⚠️ Linting issues found (non-blocking)"
          echo "✅ Linting completed"

      - name: Build frontend
        run: |
          echo "🔨 Building frontend..."
          cd frontend
          npm run build
          echo "✅ Frontend built successfully"

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: frontend-build-artifacts
          path: frontend/dist/
          retention-days: 7

  # Job 3: Docker Build Test
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build-java-services, build-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          echo "🐳 Testing Docker builds..."
          
          # Test building each service
          SERVICES=("eureka-server" "api-gateway" "auth-service" "order-service" "catalog-service" "frontend")
          
          for service in "${SERVICES[@]}"; do
            echo "Building $service..."
            if [ -f "$service/Dockerfile" ]; then
              docker build -t "shoplite-$service:test" -f "$service/Dockerfile" .
              echo "✅ $service built successfully"
            else
              echo "⚠️ No Dockerfile found for $service"
            fi
          done
          
          echo "✅ All Docker builds completed"

      - name: Test Docker images
        run: |
          echo "🧪 Testing Docker images..."
          
          # Test that images can start (basic health check)
          docker images | grep shoplite
          echo "✅ Docker image validation completed"

  # Job 4: Integration Tests (if available)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-java-services, build-frontend]
    if: false  # Enable when integration tests are available
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          echo "🔧 Setting up integration test environment..."
          # Add integration test setup here
          echo "✅ Test environment ready"

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests..."
          # Add integration test commands here
          echo "✅ Integration tests completed"

  # Job 5: Security and Quality Checks
  security-quality:
    name: Security & Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'  # Don't fail on vulnerabilities for now

      - name: Check for secrets
        run: |
          echo "🔍 Checking for potential secrets..."
          
          # Check for common secret patterns in source code
          if grep -r -i -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist .; then
            echo "⚠️ Potential hardcoded secrets detected"
            echo "Please review and use environment variables instead"
          else
            echo "✅ No obvious secrets detected"
          fi

  # Job 6: Build Summary and PR Status
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-java-services, build-frontend, docker-build-test, security-quality]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build summary
        run: |
          echo "📊 Build Summary for PR #${{ github.event.pull_request.number }}"
          echo "=========================================="
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "Source Branch: ${{ github.head_ref }}"
          echo "Target Branch: ${{ github.base_ref }}"
          echo "Author: ${{ github.event.pull_request.user.login }}"
          echo ""
          echo "Build Results:"
          echo "✅ Java Services: ${{ needs.build-java-services.result }}"
          echo "✅ Frontend: ${{ needs.build-frontend.result }}"
          echo "✅ Docker Build: ${{ needs.docker-build-test.result }}"
          echo "✅ Security Check: ${{ needs.security-quality.result }}"
          echo ""
          
          if [[ "${{ needs.build-java-services.result }}" == "success" && 
                "${{ needs.build-frontend.result }}" == "success" && 
                "${{ needs.docker-build-test.result }}" == "success" && 
                "${{ needs.security-quality.result }}" == "success" ]]; then
            echo "🎉 All checks passed! PR is ready for review and merge."
            echo "✅ This PR can be merged when approved."
          else
            echo "❌ Some checks failed. Please review and fix issues before merging."
            exit 1
          fi

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔨 Build Summary')
            );
            
            const summary = `
            ## 🔨 Build Summary
            
            **PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
            **Source:** \`${{ github.head_ref }}\` → **Target:** \`${{ github.base_ref }}\`
            
            ### Build Results:
            - ✅ **Java Services:** ${{ needs.build-java-services.result }}
            - ✅ **Frontend:** ${{ needs.build-frontend.result }}
            - ✅ **Docker Build:** ${{ needs.docker-build-test.result }}
            - ✅ **Security Check:** ${{ needs.security-quality.result }}
            
            ${{ needs.build-java-services.result == 'success' && needs.build-frontend.result == 'success' && needs.docker-build-test.result == 'success' && needs.security-quality.result == 'success' && '🎉 **All checks passed!** This PR is ready for review and merge.' || '❌ **Some checks failed.** Please review and fix issues before merging.' }}
            
            ---
            *This comment will be updated on each push to the PR.*
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
